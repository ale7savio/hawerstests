package com.kafka.consumerkafkaexample;

import java.util.HashMap;
import java.util.Map;

import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.common.serialization.StringDeserializer;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.kafka.annotation.EnableKafka;
import org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;
import org.springframework.kafka.core.ConsumerFactory;
import org.springframework.kafka.core.DefaultKafkaConsumerFactory;
import org.springframework.kafka.core.DefaultKafkaProducerFactory;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.core.ProducerFactory;
import org.springframework.kafka.support.serializer.JsonDeserializer;

import com.hawkersco.shopifycommons.entities.Order;

@Configuration
@EnableKafka
public class KafkaConfig {
	@Bean
	KafkaTemplate<String, Order> kafkaTemplate(){
	    return new KafkaTemplate<>(producerFactory());
	}
	
	@Bean
	public ProducerFactory<String, Order> producerFactory(){
	    Map<String, Object> config = new HashMap<>();
	    return new DefaultKafkaProducerFactory<String, Order>(config);
	}
	
	@Bean
	public ConsumerFactory<String, Order> consumerFactory(){		
	    JsonDeserializer<Order> deserializer = new JsonDeserializer<>(Order.class);
	    
	    
	    deserializer.setRemoveTypeHeaders(false);

	    Map<String, Object> config = new HashMap<>();
	    config.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, false);
	    config.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);
	    config.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, deserializer);

	    return new DefaultKafkaConsumerFactory<>(config, new StringDeserializer(), deserializer);
	}
	
	@Bean
	public ConcurrentKafkaListenerContainerFactory<String, Order> kafkaListenerContainerFactory(){
		ConcurrentKafkaListenerContainerFactory<String, Order> factory = new ConcurrentKafkaListenerContainerFactory<>();
	    factory.setConsumerFactory(consumerFactory());
	    factory.setBatchListener(true);
	    return factory;
	}
}
